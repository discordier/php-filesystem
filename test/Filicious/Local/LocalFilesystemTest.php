<?php

/**
 * High level object oriented filesystem abstraction.
 *
 * @package filicious-core
 * @author  Tristan Lins <tristan.lins@bit3.de>
 * @author  Christian Schiffler <c.schiffler@cyberspectrum.de>
 * @author  Oliver Hoff <oliver@hofff.com>
 * @link    http://filicious.org
 * @license http://www.gnu.org/licenses/lgpl-3.0.html LGPL
 */

namespace Filicious\Local;

use Filicious\Local\LocalFilesystemConfig;

require_once(__DIR__ . '/../../bootstrap.php');

use Filicious\Iterator\FilesystemIterator;
use Filicious\Iterator\RecursiveFilesystemIterator;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-10-17 at 10:24:36.
 */
class LocalFilesystemTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @var string
	 */
	protected $path;

	/**
	 * @var LocalFilesystemConfig
	 */
	protected $config;

	/**
	 * @var LocalFilesystem
	 */
	protected $fs;

	protected $files = array(
		'example.txt',
		'zap/file.txt',
	);

	protected $dirs = array(
		'foo',
		'foo/bar',
		'zap',
	);

	protected $links = array(
		'foo/file.lnk' => 'file',
		'zap/bar.lnk'  => 'dir',
	);

	protected $notExists = array(
		'does_not_exists.missing',
		'foo/does_not_exists.missing',
		'foo/bar/does_not_exists.missing',
		'zap/does_not_exists.missing',
	);

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		/** create a test structure */
		$this->path = tempnam(sys_get_temp_dir(), 'php_filesystem_test_');
		unlink($this->path);
		mkdir($this->path);

		// create directory <path>/foo/bar/
		mkdir($this->path . '/foo');
		mkdir($this->path . '/foo/bar');

		// create directory <path>/zap
		mkdir($this->path . '/zap');

		// create file <path>/example.txt
		file_put_contents($this->path . '/example.txt', 'The world is like a pizza!');

		// create file <path>/zap/file.txt
		file_put_contents($this->path . '/zap/file.txt', 'Hello World!');

		if (function_exists('symlink')) {
			// create link <path>/foo/zap.lnk -> ../zap/file.txt
			symlink('../zap/file.txt', $this->path . '/foo/file.lnk');

			// create link <path>/zap/bar.lnk -> ../foo/bar/
			symlink('../foo/bar/', $this->path . '/zap/bar.lnk');
		}

		// create the filesystem object
		$this->config = LocalFilesystemConfig::create($this->path);

		$this->fs = LocalFilesystem::create($this->config);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		// delete temporary files
		$iterator = new \RecursiveIteratorIterator(
			new \RecursiveDirectoryIterator(
				$this->path,
				\FilesystemIterator::SKIP_DOTS));

		/** @var \SplFileInfo $path */
		foreach ($iterator as $path) {
			unlink($path->getPathname());
		}

		// delete temporary directories
		$iterator = new \RecursiveIteratorIterator(
			new \RecursiveDirectoryIterator(
				$this->path),
			\RecursiveIteratorIterator::CHILD_FIRST);

		/** @var \SplFileInfo $path */
		foreach ($iterator as $path) {
			if ($path->getBasename() != '.' and $path->getBasename() != '..') {
				rmdir($path->getPathname());
			}
		}
	}

	/**
	 * @covers Filicious\Local\LocalFilesystem::getRoot
	 */
	public function testGetRoot()
	{
		$expected = 'file:' . $this->path;

		$actual = $this->fs
			->getRoot()
			->getRealURL();

		$this->assertEquals($expected, $actual);
	}

	/**
	 * @covers Filicious\Local\LocalFilesystem::getFile
	 */
	public function testGetFile()
	{
		// test files without leading '/'
		foreach ($this->files as $pathname) {
			$expected = 'file:' . $this->path . '/' . $pathname;
			$actual   = $this->fs
				->getFile($pathname)
				->getRealURL();
			$this->assertEquals($expected, $actual);
		}

		// test files with leading '/'
		foreach ($this->files as $pathname) {
			$expected = 'file:' . $this->path . '/' . $pathname;
			$actual   = $this->fs
				->getFile('/' . $pathname)
				->getRealURL();
			$this->assertEquals($expected, $actual);
		}

		// test directories without leading '/'
		foreach ($this->dirs as $pathname) {
			$expected = 'file:' . $this->path . '/' . $pathname;
			$actual   = $this->fs
				->getFile($pathname)
				->getRealURL();
			$this->assertEquals($expected, $actual);
		}

		// test directories with leading '/'
		foreach ($this->dirs as $pathname) {
			$expected = 'file:' . $this->path . '/' . $pathname;
			$actual   = $this->fs
				->getFile('/' . $pathname)
				->getRealURL();
			$this->assertEquals($expected, $actual);
		}

		if (function_exists('symlink')) {
			// test links without leading '/'
			foreach ($this->links as $pathname => $type) {
				$expected = 'file:' . $this->path . '/' . $pathname;
				$actual   = $this->fs
					->getFile($pathname)
					->getRealURL();
				$this->assertEquals($expected, $actual);
			}

			// test links with leading '/'
			foreach ($this->links as $pathname => $type) {
				$expected = 'file:' . $this->path . '/' . $pathname;
				$actual   = $this->fs
					->getFile('/' . $pathname)
					->getRealURL();
				$this->assertEquals($expected, $actual);
			}
		}

		// test non existing files without leading '/'
		foreach ($this->notExists as $pathname) {
			$expected = 'file:' . $this->path . '/' . $pathname;
			$actual   = $this->fs
				->getFile($pathname)
				->getRealURL();
			$this->assertEquals($expected, $actual);
		}

		// test non existing files with leading '/'
		foreach ($this->notExists as $pathname) {
			$expected = 'file:' . $this->path . '/' . $pathname;
			$actual   = $this->fs
				->getFile('/' . $pathname)
				->getRealURL();
			$this->assertEquals($expected, $actual);
		}
	}

	/**
	 * @covers Filicious\Local\LocalFile::isLink
	 */
	public function testIsLink()
	{
		// test files
		foreach ($this->files as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertFalse($file->isLink());
		}

		// test directories
		foreach ($this->dirs as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertFalse($file->isLink());
		}

		if (function_exists('symlink')) {
			// test links
			foreach ($this->links as $pathname => $type) {
				$file = $this->fs->getFile($pathname);
				$this->assertTrue($file->isLink());
			}

			// test non existing files
			foreach ($this->notExists as $pathname) {
				$file = $this->fs->getFile($pathname);
				$this->assertFalse($file->isLink());
			}
		}
	}

	/**
	 * @covers Filicious\Local\LocalFile::isFile
	 */
	public function testIsFile()
	{
		// test files
		foreach ($this->files as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertTrue($file->isFile());
		}

		// test directories
		foreach ($this->dirs as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertFalse($file->isFile());
		}

		if (function_exists('symlink')) {
			// test links
			foreach ($this->links as $pathname => $type) {
				$file = $this->fs->getFile($pathname);
				switch ($type) {
					case 'file':
						$this->assertTrue($file->isFile());
						break;
					case 'dir':
						$this->assertFalse($file->isFile());
						break;
				}
			}
		}

		// test non existing files
		foreach ($this->notExists as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertFalse($file->isFile());
		}
	}

	/**
	 * @covers Filicious\Local\LocalFile::isDirectory
	 */
	public function testIsDirectory()
	{
		// test files
		foreach ($this->files as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertFalse($file->isDirectory());
		}

		// test directories
		foreach ($this->dirs as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertTrue($file->isDirectory());
		}

		if (function_exists('symlink')) {
			// test links
			foreach ($this->links as $pathname => $type) {
				$file = $this->fs->getFile($pathname);
				switch ($type) {
					case 'file':
						$this->assertFalse($file->isDirectory());
						break;
					case 'dir':
						$this->assertTrue($file->isDirectory());
						break;
				}
			}
		}

		// test non existing files
		foreach ($this->notExists as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertFalse($file->isDirectory());
		}
	}

	/**
	 * @covers Filicious\Local\LocalFile::exists
	 */
	public function testExists()
	{
		// test files
		foreach ($this->files as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertTrue($file->exists());
		}

		// test directories
		foreach ($this->dirs as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertTrue($file->exists());
		}

		if (function_exists('symlink')) {
			// test links
			foreach ($this->links as $pathname => $type) {
				$file = $this->fs->getFile($pathname);
				$this->assertTrue($file->exists());
			}
		}

		// test non existing files
		foreach ($this->notExists as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertFalse($file->exists());
		}
	}

	/**
	 * @covers Filicious\Local\LocalFile::getPathname
	 */
	public function testGetPathname()
	{
		// test files
		foreach ($this->files as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals('/' . $pathname, $file->getPathname());
		}

		// test directories
		foreach ($this->dirs as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals('/' . $pathname, $file->getPathname());
		}

		if (function_exists('symlink')) {
			// test links
			foreach ($this->links as $pathname => $type) {
				$file = $this->fs->getFile($pathname);
				$this->assertEquals('/' . $pathname, $file->getPathname());
			}
		}

		// test non existing files
		foreach ($this->notExists as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals('/' . $pathname, $file->getPathname());
		}
	}

	/**
	 * @covers Filicious\Local\LocalFile::getBasename
	 */
	public function testGetBasename()
	{
		// test files
		foreach ($this->files as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(basename($pathname), $file->getBasename());
		}

		// test directories
		foreach ($this->dirs as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(basename($pathname), $file->getBasename());
		}

		if (function_exists('symlink')) {
			// test links
			foreach ($this->links as $pathname => $type) {
				$file = $this->fs->getFile($pathname);
				$this->assertEquals(basename($pathname), $file->getBasename());
			}
		}

		// test non existing files
		foreach ($this->notExists as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(basename($pathname), $file->getBasename());
		}
	}

	/**
	 * @covers Filicious\Local\LocalFile::getExtension
	 */
	public function testGetExtension()
	{
		// test files
		foreach ($this->files as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(
				preg_match('#^.*\.(\w+)$#', $pathname, $match) ? $match[1] : null,
				$file->getExtension()
			);
		}

		// test directories
		foreach ($this->dirs as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(
				preg_match('#^.*\.(\w+)$#', $pathname, $match) ? $match[1] : null,
				$file->getExtension()
			);
		}

		if (function_exists('symlink')) {
			// test links
			foreach ($this->links as $pathname => $type) {
				$file = $this->fs->getFile($pathname);
				$this->assertEquals(
					preg_match('#^.*\.(\w+)$#', $pathname, $match) ? $match[1] : null,
					$file->getExtension()
				);
			}
		}

		// test non existing files
		foreach ($this->notExists as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(
				preg_match('#^.*\.(\w+)$#', $pathname, $match) ? $match[1] : null,
				$file->getExtension()
			);
		}
	}

	/**
	 * @covers Filicious\Local\LocalFile::getParent
	 */
	public function testGetParent()
	{
		// test root parent
		$this->assertEquals(
			null,
			$this->fs
				->getRoot()
				->getParent()
		);

		// test files
		foreach ($this->files as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(
				dirname($pathname) != '.' ? $this->fs->getFile(dirname($pathname)) : $this->fs->getRoot(),
				$file->getParent()
			);
		}

		// test directories
		foreach ($this->dirs as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(
				dirname($pathname) != '.' ? $this->fs->getFile(dirname($pathname)) : $this->fs->getRoot(),
				$file->getParent()
			);
		}

		if (function_exists('symlink')) {
			// test links
			foreach ($this->links as $pathname => $type) {
				$file = $this->fs->getFile($pathname);
				$this->assertEquals(
					dirname($pathname) != '.' ? $this->fs->getFile(dirname($pathname)) : $this->fs->getRoot(),
					$file->getParent()
				);
			}
		}

		// test non existing files
		foreach ($this->notExists as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(
				dirname($pathname) != '.' ? $this->fs->getFile(dirname($pathname)) : $this->fs->getRoot(),
				$file->getParent()
			);
		}
	}

	/**
	 * @covers Filicious\Local\LocalFile::getAccessTime
	 */
	public function testGetAccessTime()
	{
		// test files
		foreach ($this->files as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(fileatime($this->path . '/' . $pathname), $file->getAccessTime());
		}

		// test directories
		foreach ($this->dirs as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(fileatime($this->path . '/' . $pathname), $file->getAccessTime());
		}

		if (function_exists('symlink')) {
			// test links
			foreach ($this->links as $pathname => $type) {
				$file = $this->fs->getFile($pathname);
				$this->assertEquals(fileatime($this->path . '/' . $pathname), $file->getAccessTime());
			}
		}

		// test non existing files
		foreach ($this->notExists as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(null, $file->getAccessTime());
		}
	}

	/**
	 * @covers Filicious\Local\LocalFile::getCreationTime
	 */
	public function testGetCreationTime()
	{
		// test files
		foreach ($this->files as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(filectime($this->path . '/' . $pathname), $file->getCreationTime());
		}

		// test directories
		foreach ($this->dirs as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(filectime($this->path . '/' . $pathname), $file->getCreationTime());
		}

		if (function_exists('symlink')) {
			// test links
			foreach ($this->links as $pathname => $type) {
				$file = $this->fs->getFile($pathname);
				$this->assertEquals(filectime($this->path . '/' . $pathname), $file->getCreationTime());
			}
		}

		// test non existing files
		foreach ($this->notExists as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(null, $file->getCreationTime());
		}
	}

	/**
	 * @covers Filicious\Local\LocalFile::getLastModified
	 */
	public function testGetLastModified()
	{
		// test files
		foreach ($this->files as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(filemtime($this->path . '/' . $pathname), $file->getModifyTime());
		}

		// test directories
		foreach ($this->dirs as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(filemtime($this->path . '/' . $pathname), $file->getModifyTime());
		}

		if (function_exists('symlink')) {
			// test links
			foreach ($this->links as $pathname => $type) {
				$file = $this->fs->getFile($pathname);
				$this->assertEquals(filemtime($this->path . '/' . $pathname), $file->getModifyTime());
			}
		}

		// test non existing files
		foreach ($this->notExists as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(null, $file->getModifyTime());
		}
	}

	/**
	 * @covers Filicious\Local\LocalFile::getSize
	 */
	public function testGetSize()
	{
		// test files
		foreach ($this->files as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(filesize($this->path . '/' . $pathname), $file->getSize());
		}

		// test directories
		foreach ($this->dirs as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(filesize($this->path . '/' . $pathname), $file->getSize());
		}

		if (function_exists('symlink')) {
			// test links
			foreach ($this->links as $pathname => $type) {
				$file = $this->fs->getFile($pathname);
				$this->assertEquals(filesize($this->path . '/' . $pathname), $file->getSize());
			}
		}

		// test non existing files
		foreach ($this->notExists as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(null, $file->getSize());
		}
	}

	/**
	 * @covers Filicious\Local\LocalFile::getOwner
	 */
	public function testGetOwner()
	{
		// test files
		foreach ($this->files as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(fileowner($this->path . '/' . $pathname), $file->getOwner());
		}

		// test directories
		foreach ($this->dirs as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(fileowner($this->path . '/' . $pathname), $file->getOwner());
		}

		if (function_exists('symlink')) {
			// test links
			foreach ($this->links as $pathname => $type) {
				$file = $this->fs->getFile($pathname);
				$this->assertEquals(fileowner($this->path . '/' . $pathname), $file->getOwner());
			}
		}

		// test non existing files
		foreach ($this->notExists as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(null, $file->getOwner());
		}
	}

	/**
	 * @covers Filicious\Local\LocalFile::getGroup
	 */
	public function testGetGroup()
	{
		// test files
		foreach ($this->files as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(filegroup($this->path . '/' . $pathname), $file->getGroup());
		}

		// test directories
		foreach ($this->dirs as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(filegroup($this->path . '/' . $pathname), $file->getGroup());
		}

		if (function_exists('symlink')) {
			// test links
			foreach ($this->links as $pathname => $type) {
				$file = $this->fs->getFile($pathname);
				$this->assertEquals(filegroup($this->path . '/' . $pathname), $file->getGroup());
			}
		}

		// test non existing files
		foreach ($this->notExists as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(null, $file->getGroup());
		}
	}

	/**
	 * @covers Filicious\Local\LocalFile::getMode
	 */
	public function testGetMode()
	{
		// test files
		foreach ($this->files as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(fileperms($this->path . '/' . $pathname), $file->getMode());
		}

		// test directories
		foreach ($this->dirs as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(fileperms($this->path . '/' . $pathname), $file->getMode());
		}

		if (function_exists('symlink')) {
			// test links
			foreach ($this->links as $pathname => $type) {
				$file = $this->fs->getFile($pathname);
				$this->assertEquals(fileperms($this->path . '/' . $pathname), $file->getMode());
			}
		}

		// test non existing files
		foreach ($this->notExists as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertEquals(null, $file->getMode());
		}
	}

	/**
	 * @covers Filicious\Local\LocalFile::isReadable
	 */
	public function testIsReadable()
	{
		// test files
		foreach ($this->files as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertTrue($file->isReadable());
		}

		// test directories
		foreach ($this->dirs as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertTrue($file->isReadable());
		}

		if (function_exists('symlink')) {
			// test links
			foreach ($this->links as $pathname => $type) {
				$file = $this->fs->getFile($pathname);
				$this->assertTrue($file->isReadable());
			}
		}

		// test non existing files
		foreach ($this->notExists as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertFalse($file->isReadable());
		}
	}

	/**
	 * @covers Filicious\Local\LocalFile::isWritable
	 */
	public function testIsWritable()
	{
		// test files
		foreach ($this->files as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertTrue($file->isWritable());
		}

		// test directories
		foreach ($this->dirs as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertTrue($file->isWritable());
		}

		if (function_exists('symlink')) {
			// test links
			foreach ($this->links as $pathname => $type) {
				$file = $this->fs->getFile($pathname);
				$this->assertTrue($file->isWritable());
			}
		}

		// test non existing files
		foreach ($this->notExists as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertTrue($file->isWritable());
		}
	}

	/**
	 * @covers Filicious\Local\LocalFile::isExecutable
	 */
	public function testIsExecutable()
	{
		// test files
		foreach ($this->files as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertFalse($file->isExecutable());
		}

		// test directories
		foreach ($this->dirs as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertTrue($file->isExecutable());
		}

		if (function_exists('symlink')) {
			// test links
			foreach ($this->links as $pathname => $type) {
				$file = $this->fs->getFile($pathname);
				switch ($type) {
					case 'file':
						$this->assertFalse($file->isExecutable());
						break;
					case 'dir':
						$this->assertTrue($file->isExecutable());
						break;
				}
			}
		}

		// test non existing files
		foreach ($this->notExists as $pathname) {
			$file = $this->fs->getFile($pathname);
			$this->assertFalse($file->isExecutable());
		}
	}

	public function testTree()
	{
		$filesystemIterator = new RecursiveFilesystemIterator($this->fs->getRoot(
		                                                      ), FilesystemIterator::CURRENT_AS_BASENAME);
		$treeIterator       = new \RecursiveTreeIterator($filesystemIterator);

		foreach ($treeIterator as $path) {
			echo $path . "\n";
		}
	}
}
