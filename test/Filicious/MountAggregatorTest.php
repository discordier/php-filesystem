<?php

/**
 * High level object oriented filesystem abstraction.
 *
 * @package filicious-core
 * @author  Tristan Lins <tristan.lins@bit3.de>
 * @author  Christian Schiffler <c.schiffler@cyberspectrum.de>
 * @author  Oliver Hoff <oliver@hofff.com>
 * @link    http://filicious.org
 * @license http://www.gnu.org/licenses/lgpl-3.0.html LGPL
 */

namespace Filicious;

use Filicious\Local\LocalAdapter;

require_once(__DIR__ . '/../bootstrap.php');

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-10-17 at 10:24:36.
 */
class MountAggregatorTest extends \PHPUnit_Framework_TestCase
{

	protected $mounts = array(
		'some/path',
		'other',
		'multiple/adapters',
		'multiple/adapters',
	);
	
	protected $paths = array(
		'' => array(''),
		'some' => array(''),
		'non_existant/path' => array(''),
		
		'some/path' => array('some/path', 0),
		'some/path/dir' => array('some/path', 0),
		'some/path/other' => array('some/path', 0),
		
		'other' => array('other', 1),
		'other/path' => array('other', 1),
		
		'multiple/adapters' => array('multiple/adapters', 3, 2),
		'multiple/adapters/sub/one' => array('multiple/adapters', 3, 2),
		'multiple/adapters/sub/two' => array('multiple/adapters', 3, 2),
	);
	
	protected $aggregator;
	
	protected $adapters;
	
	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->aggregator = new MountAggregator();
		
		foreach($this->mounts as $i => $path) {
			$this->adapters[$i] = $adapter = new LocalAdapter();
			$this->aggregator->addAdapter(explode('/', $path), $adapter);
		}
		
// 		$clazz = new \ReflectionClass(get_class($this->aggregator));
// 		$prop = $clazz->getProperty('tree');
// 		$prop->setAccessible(true);
// 		echo 'tree: ';
// 		print_r($prop->getValue($this->aggregator));
    }

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}
	
	public function getParts($path) {
		return array_filter(explode('/', $path), 'strlen');
	}
	
	public function getAdapter($i) {
		return is_int($i) ? $this->adapters[$i] : null;
	}
	
	/**
	 * @covers Filicious\MountAggregator::getAdapter
	 */
	public function testGet()
	{
		// test top most adapter retrieval and base
		foreach ($this->paths as $path => $mount) {
			$baseExpected = $this->getParts(array_shift($mount));
			$mountExpected = $this->getAdapter(array_shift($mount));
			
			$mount = $this->aggregator->getAdapter($this->getParts($path), $base);
			
			$this->assertEquals($baseExpected, $base);
			$this->assertEquals($mountExpected, $mount);
		}
	}
	
	/**
	 * @covers Filicious\MountAggregator::getAdapter
	 */
	public function testGetAll()
	{
		// test all adapter retrieval and base
		foreach ($this->paths as $path => $mount) {
			$baseExpected = $this->getParts(array_shift($mount));
			$mountExpected = (array) array_map(array($this, 'getAdapter'), $mount);
			
			$mount = $this->aggregator->getAllAdapters($this->getParts($path), $base);
			
			$this->assertEquals($baseExpected, $base);
			$this->assertEquals($mountExpected, $mount);
		}
	}
	
	/**
	 * @covers Filicious\MountAggregator::addAdapter
	 */
	public function testAdd()
	{
		$baseExpected = array('new', 'path');
		$adapterExpected = new LocalAdapter();
		
		$this->aggregator->addAdapter($baseExpected, $adapterExpected);
		
		$adapter = $this->aggregator->getAdapter($baseExpected, $base);
		
		$this->assertEquals($baseExpected, $base);
		$this->assertEquals($adapterExpected, $adapter);
		
		$adapter = $this->aggregator->getAdapter(array_merge($baseExpected, array('sub')), $base);
		
		$this->assertEquals($baseExpected, $base);
		$this->assertEquals($adapterExpected, $adapter);
		
		$this->testGet();
		$this->testGetAll();
	}
	
}
